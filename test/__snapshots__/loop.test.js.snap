// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Sum of Odds 1`] = `
"// 定义一个函数 so1，返回一个对象，其中包含属性 so
function so1() {
  return _scopeTrack.drop({
    so: "someValue"
  });
}

// 定义一个函数 main，用于查找特定条件下的值
function main() {
  {
    /****** 0 ******/
    const _scopeTrack = _scopeHelper.createScope("for");
    for (let index = _scopeHelper.variable("index", 0); index < 10 && _scopeTrack.track("index < 10"); _scopeHelper.setVariable("index", (index++, index))) {
      {
        /****** 1 ******/
        const _scopeTrack = _scopeHelper.createScope("if");
        if (index === 5 && _scopeTrack.track("index === 5")) {
          return _scopeTrack.drop(index); // 返回 5
        }
        _scopeTrack.drop();
        /****** 1 ******/
      }
    }
    _scopeTrack.drop();
    /****** 0 ******/
  }
  return _scopeTrack.drop(null); // 如果没有找到，返回 null
}

// 使用 so1 函数，并解构赋值获取 so 属性
let _so = _scopeHelper.variable("_so", _scopeHelper.execute(() => so1())),
  so = _scopeHelper.variable("so", _so.so);

// 调用 main 函数并获取结果
let result = _scopeHelper.variable("result", _scopeHelper.execute(() => main()));

// 使用解构赋值从空数组中获取属性（不会有任何效果）
const _ref = _scopeHelper.variable("_ref", []),
  aa1 = _scopeHelper.variable("aa1", _ref.aa1),
  bb2 = _scopeHelper.variable("bb2", _ref.bb2);

// 假设 xx 函数返回一个对象，我们从中解构赋值获取属性
function xx() {
  return _scopeTrack.drop({
    aa3: "value3",
    aa4: "value4"
  });
}
const _xx = _scopeHelper.variable("_xx", _scopeHelper.execute(() => xx())),
  aa3 = _scopeHelper.variable("aa3", _xx.aa3),
  aa4 = _scopeHelper.variable("aa4", _xx.aa4);

// 输出结果
_scopeHelper.execute(() => console.log(so));
_scopeHelper.execute(() => console.log(result));
_scopeHelper.execute(() => console.log(aa3, aa4));"
`;
